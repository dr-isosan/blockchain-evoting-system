import React, { useState, useEffect } from "react";
import "./operations.css";
import Header from "../components/HeaderAdmin";
import Footer from "../components/Footer";
import Loading from "../components/Loading";

function RemovePermission() {
  const [electionName, setElectionName] = useState(""); // ğŸ“Œ SeÃ§im adÄ±
  const [message, setMessage] = useState({ type: "", text: "" });
  const [isLoading, setIsLoading] = useState(false);
  const [showConfirm, setShowConfirm] = useState(false);
  const [inactiveElections, setInactiveElections] = useState([]);
  useEffect(() => {
        const fetchInactiveElections = async () => {
            try {
                const response = await fetch("http://localhost:4000/api/getInactiveElections");
                const result = await response.json();
    
                if (result.success) {
                    setInactiveElections(result.inactiveElections);
                } else {
                    setMessage({ type: "error", text: "Ä°naktif seÃ§imler alÄ±namadÄ±!" });
                }
            } catch (error) {
                console.error("SeÃ§imleri getirme hatasÄ±:", error);
                setMessage({ type: "error", text: "API'den seÃ§imleri getirme baÅŸarÄ±sÄ±z!" });
            }
        };
    
        fetchInactiveElections();
    }, []);
  const handleRevokePermission = async () => {
    if (!electionName) {
      setMessage({ type: "error", text: "SeÃ§im adÄ± girilmeli!" });
      return;
    }

    // Ä°lk tÄ±klamada onay gÃ¶ster
    if (!showConfirm) {
      setShowConfirm(true);
      setMessage({ type: "warning", text: `"${electionName}" seÃ§imi iÃ§in yetkileri iptal etmek istediÄŸinizden emin misiniz?` });
      return;
    }

    try {
      setIsLoading(true);
      setMessage({ type: "info", text: "Yetki iptal iÅŸlemi yapÄ±lÄ±yor..." });
      
      const response = await fetch("http://localhost:4000/api/revokePermission", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ electionName })
      });

      const result = await response.json();
      console.log("API YanÄ±tÄ±:", result);
      
      if (result.success) {
        setMessage({ type: "success", text: `"${electionName}" seÃ§imi iÃ§in yetkiler baÅŸarÄ±yla iptal edildi.` });
        setElectionName(""); // Form temizleme
        setShowConfirm(false); // Onay ekranÄ±nÄ± sÄ±fÄ±rla
      } else {
        setMessage({ type: "error", text: result.error || "Yetki iptal iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu." });
      }
    } catch (error) {
      setMessage({ type: "error", text: "Yetki iptal edilirken hata oluÅŸtu: " + error.message });
    } finally {
      setIsLoading(false);
    }
  };

  const handleCancel = () => {
    setShowConfirm(false);
    setMessage({});
  };

  return (
    <>
      <Header title="Yetki Ä°ptali" />
      
      <div className="operations-container page-transition">
        <h2>Yetki Ä°ptal Ä°ÅŸlemi</h2>

        <div className="form-section">
          <h3>SeÃ§im Yetki Ä°ptali</h3>
          <div className="form-description">
            Bu iÅŸlem, belirtilen seÃ§im iÃ§in verilmiÅŸ olan tÃ¼m yetkileri iptal eder.
            Ä°ÅŸlem geri alÄ±namaz, dikkatli bir ÅŸekilde uygulanmalÄ±dÄ±r.
          </div>
          
          <div className="form-group-content">
            <select
                        value={electionName}
                        onChange={(e) => setElectionName(e.target.value)}
                        className="input-field"
                    >
                        <option value="">SeÃ§im SeÃ§iniz</option>
                        {inactiveElections.map((name, index) => (
                            <option key={index} value={name}>
                                {name}
                            </option>
                        ))}
                    </select>

            {!showConfirm ? (
              <button 
                onClick={handleRevokePermission}
                disabled={isLoading || !electionName}
                className="action-button danger"
              >
                <span className="button-icon">ğŸ”’</span> 
                {isLoading ? "Ä°ÅŸlem YapÄ±lÄ±yor..." : "Yetkileri Ä°ptal Et"}
              </button>
            ) : (
              <div className="confirm-actions">
                <button 
                  onClick={handleRevokePermission}
                  disabled={isLoading}
                  className="action-button danger"
                >
                  <span className="button-icon">âœ“</span> Onayla
                </button>
                <button 
                  onClick={handleCancel}
                  disabled={isLoading}
                  className="action-button secondary"
                >
                  <span className="button-icon">âœ—</span> Ä°ptal
                </button>
              </div>
            )}
          </div>
        </div>
        
        {isLoading && <Loading text="Yetki iptal ediliyor..." />}
        
        {message.text && (
          <div className={`message-box ${message.type}`}>
            {message.text}
          </div>
        )}
        
        <div className="card">
          <div className="card-title">Yetki Ä°ptali HakkÄ±nda</div>
          <p>Bu iÅŸlem, belirtilen seÃ§im iÃ§in verilmiÅŸ olan tÃ¼m yetkileri iptal eder. 
          Bu iÅŸlem sonrasÄ±nda:</p>
          <ul style={{paddingLeft: "1.5rem", margin: "1rem 0"}}>
            <li>Ä°lgili seÃ§imle ilgili yetki gerektiren iÅŸlemler yapÄ±lamaz</li>
            <li>Aday ekleme iÅŸlemi gerÃ§ekleÅŸtirilemez</li>
            <li>SeÃ§im sÃ¼reÃ§leri durabilir</li>
          </ul>
          <p>Bu iÅŸlem genellikle seÃ§im tamamlandÄ±ktan veya bir sorun oluÅŸtuÄŸunda gÃ¼venlik amaÃ§lÄ± kullanÄ±lÄ±r.</p>
        </div>
      </div>
      
      <Footer />
    </>
  );
}

export default RemovePermission;